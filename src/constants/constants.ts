export type Icon = 'ðŸ”´' | 'ðŸŸ¢' | 'ðŸ”µ' | 'âšª' | 'ðŸš¦' | 'ðŸ’¡';
export const HEX_SEPARATOR = '|';
export const BREAK_LINE = '\n';

export const CODEBOOK: { [p: string]: Icon | `${Icon}${Icon}` } = {
  '0': 'ðŸ”´',
  '1': 'ðŸŸ¢',
  '2': 'ðŸ”´ðŸŸ¢',
  '3': 'ðŸ”´ðŸ”µ',
  '4': 'ðŸ”´âšª',
  '5': 'ðŸŸ¢ðŸ”µ',
  '6': 'ðŸŸ¢âšª',
  '7': 'ðŸ”µâšª',
  '8': 'âšªâšª',
  '9': 'ðŸ”µ',
  A: 'ðŸ”µðŸ”´',
  B: 'ðŸŸ¢ðŸ”´',
  C: 'âšªðŸ”´',
  D: 'ðŸ”µðŸŸ¢',
  E: 'âšªðŸ”µ',
  F: 'âšª',
  [BREAK_LINE]: 'ðŸš¦', // 1 sÃ­mbolo (indicador de nueva lÃ­nea)
  [HEX_SEPARATOR]: 'ðŸ’¡', // 1 sÃ­mbolo (indicador de separaciÃ³n)
};

export const REVERSE_CODEBOOK = Object.fromEntries(
  Object.entries(CODEBOOK).map(([key, value]) => [value, key]),
);

// Define the icon-to-letter mapping
export const ICON_TO_LETTER_MAP: { [key in Icon]: string } = {
  'ðŸ”´': 'R',
  'ðŸŸ¢': 'G',
  'ðŸ”µ': 'V',
  'âšª': 'W',
  'ðŸš¦': 'Y',
  'ðŸ’¡': 'X',
};

// FunciÃ³n para extraer Ã­conos Ãºnicos del CODEBOOK
function getUniqueIcons(codebook: { [key: string]: string }): string[] {
  const uniqueIcons = new Set<string>();
  for (const symbol of Object.values(codebook)) {
    for (const char of symbol) {
      uniqueIcons.add(char);
    }
  }
  return Array.from(uniqueIcons);
}

// FunciÃ³n para construir el regex de iconos permitidos
function buildAllowedIconsRegex(codebook: { [key: string]: string }): RegExp {
  const uniqueIcons = getUniqueIcons(codebook);
  const allowedIcons = uniqueIcons.join('');
  return new RegExp(`^[${allowedIcons}]+$`);
}

// Construir el regex de los valores permitidos
export const ALLOWED_ICONS_REGEX = buildAllowedIconsRegex(CODEBOOK);

// FunciÃ³n para construir el regex de caracteres no permitidos
function buildCleanedIconsRegex(codebook: { [key: string]: string }): RegExp {
  const uniqueIcons = getUniqueIcons(codebook);
  const allowedIcons = uniqueIcons.join('');
  return new RegExp(`[^${allowedIcons}]`, 'g');
}

// Construir el regex para eliminar caracteres no permitidos
export const CLEANED_ICONS_REGEX = buildCleanedIconsRegex(CODEBOOK);

// Mapeo de teclas a Ã­conos
// DefiniciÃ³n de tipo para las teclas
export type LeftIconsKeys = 'A' | 'Q' | 'W' | 'S' | 'E' | 'D';
export type RightIconsKeys = 'K' | 'I' | 'O' | 'L' | 'P' | 'Ã‘';
// DefiniciÃ³n de arrays de teclas
export const LEFT_ICONS_KEYS_ARRAY: ReadonlyArray<LeftIconsKeys> = [
  'A',
  'Q',
  'W',
  'S',
  'E',
  'D',
];
export const RIGHT_ICONS_KEYS_ARRAY: ReadonlyArray<RightIconsKeys> = [
  'K',
  'I',
  'O',
  'L',
  'P',
  'Ã‘',
];
export type IconsKeys = LeftIconsKeys | RightIconsKeys;

// Mapeo simbÃ³lico de teclas a Ã­conos
const KEY_GROUPS: Record<Icon, IconsKeys[]> = {
  'ðŸ”´': ['A', 'K'],
  'ðŸŸ¢': ['W', 'O'],
  'ðŸ”µ': ['D', 'Ã‘'],
  'âšª': ['S', 'L'],
  'ðŸ’¡': ['Q', 'I'],
  'ðŸš¦': ['E', 'P'],
};

// Inicializar el mapeo de teclas a Ã­conos con Partial para evitar el error inicial
const keyToIconMap: Partial<Record<IconsKeys, Icon>> = {};

// Llenar el objeto keyToIconMap usando el objeto de grupos de teclas
for (const [icon, keys] of Object.entries(KEY_GROUPS) as [
  Icon,
  IconsKeys[],
][]) {
  for (const key of keys) {
    keyToIconMap[key] = icon;
  }
}

// Asegurar a TypeScript que keyToIconMap ahora cumple con Record<Key, Icon>
export const KEY_TO_ICON = keyToIconMap as Record<IconsKeys, Icon>;

export const EMOJI_REGEX = /\p{Emoji_Presentation}|\p{Emoji}\uFE0F/gu;
